---
import Layout from "../../layouts/Layout.astro";
import { allBusinesses } from "@/lib/data";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { ProductCard, type Product } from "@/components/business/ProductCard";
import { BusinessCard } from "@/components/business/BusinessCard";
import { ReviewCard, type Review } from "@/components/business/ReviewCard";
import { ProductPaymentForm } from "@/components/business/ProductPaymentForm";
import MapView from "@/components/map-view/map-view";

// Import the Business type from types folder
import type { Business } from "@/types/business";

// Get the business ID from URL params and product ID from search params
const { id: businessId } = Astro.params;
const selectedProductId = Astro.url.searchParams.get("product");

// Función requerida para rutas dinámicas en modo estático
export function getStaticPaths() {
  return allBusinesses.map((business) => ({
    params: { id: business.id },
    props: { business },
  }));
}

// Obtener la propiedad 'business' de las props
const { business } = Astro.props;

// Get the selected product if there's an ID
const selectedProduct = selectedProductId
  ? business.products?.find(
      (p: Product) => p.id.toString() === selectedProductId,
    )
  : null;

// Verificar si el negocio tiene coordenadas válidas (para evitar errores en el mapa)
const hasValidCoordinates =
  business.latitude &&
  business.longitude &&
  !isNaN(business.latitude) &&
  !isNaN(business.longitude);

// Client-side React components
const ReactComponents = {
  Button: Button,
  Badge: Badge,
  Card: Card,
  CardHeader: CardHeader,
  CardContent: CardContent,
  CardTitle: CardTitle,
};
---

<Layout title={`${business.name} | Orbita`}>
  <div class="container mx-auto px-4 py-8">
    {
      selectedProduct ? (
        <div class="max-w-4xl mx-auto">
          <Button
            client:load
            variant="ghost"
            className="mb-4"
            onClick={() => {
              const url = new URL(window.location.href);
              url.searchParams.delete("product");
              window.history.pushState({}, "", url);
              window.location.reload();
            }}
          >
            ← Volver al negocio
          </Button>
          <Card>
            <div class="relative aspect-video">
              <img
                src={selectedProduct.image}
                alt={selectedProduct.name}
                class="w-full h-full object-cover"
              />
              <Badge
                client:load
                variant={
                  selectedProduct.inStock !== false ? "secondary" : "outline"
                }
                className="absolute top-4 right-4"
              >
                {selectedProduct.inStock !== false ? "Disponible" : "Agotado"}
              </Badge>
            </div>
            <CardHeader>
              <div class="flex justify-between items-start">
                <div>
                  <CardTitle className="text-2xl">
                    {selectedProduct.name}
                  </CardTitle>
                  <Badge client:load variant="secondary" className="mt-2">
                    {selectedProduct.category}
                  </Badge>
                </div>
                <div class="text-2xl font-bold">
                  ${selectedProduct.price.toFixed(2)}
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <p class="text-muted-foreground">{selectedProduct.description}</p>
              <ProductPaymentForm
                client:load
                product={selectedProduct}
                quantity={1}
                isOpen={true}
                onClose={() => {
                  const url = new URL(window.location.href);
                  url.searchParams.delete("product");
                  window.history.pushState({}, "", url);
                  window.location.reload();
                }}
                maxQuantity={selectedProduct.maxQuantity ?? 99}
              />
            </CardContent>
          </Card>
        </div>
      ) : (
        <>
          <div class="grid gap-6 lg:grid-cols-[2fr_1fr]">
            {/* Business Info */}
            <Card>
              <div class="relative aspect-video">
                <img
                  src={business.image}
                  alt={business.name}
                  class="w-full h-full object-cover"
                />
                {business.promoted && (
                  <Badge
                    client:load
                    variant="default"
                    className="absolute top-4 right-4 bg-yellow-500 text-black"
                  >
                    ★ DESTACADO
                  </Badge>
                )}
              </div>
              <CardHeader>
                <div class="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-2xl">{business.name}</CardTitle>
                    <Badge client:load variant="secondary" className="mt-2">
                      {business.category}
                    </Badge>
                  </div>
                  <div class="flex items-center gap-1 text-yellow-500">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5 fill-current"
                      viewBox="0 0 24 24"
                    >
                      <path d="M12 2l2.4 7.4h7.6l-6 4.6 2.4 7.4-6-4.6-6 4.6 2.4-7.4-6-4.6h7.6z" />
                    </svg>
                    <span class="text-lg font-semibold">
                      {business.rating.toFixed(1)}
                    </span>
                    <span class="text-muted-foreground">
                      ({business.totalReviews} reseñas)
                    </span>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div class="space-y-4">
                  <p class="text-muted-foreground">{business.description}</p>
                  <div class="grid gap-2">
                    {business.phone && (
                      <div class="flex items-center gap-2">
                        <span class="font-medium">Teléfono:</span>
                        <a
                          href={`tel:${business.phone}`}
                          class="text-primary hover:underline"
                        >
                          {business.phone}
                        </a>
                      </div>
                    )}
                    {business.email && (
                      <div class="flex items-center gap-2">
                        <span class="font-medium">Email:</span>
                        <a
                          href={`mailto:${business.email}`}
                          class="text-primary hover:underline"
                        >
                          {business.email}
                        </a>
                      </div>
                    )}
                    {business.address && (
                      <div class="flex items-center gap-2">
                        <span class="font-medium">Dirección:</span>
                        <span>{business.address}</span>
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Map */}
            {hasValidCoordinates && (
              <Card className="h-[400px] overflow-hidden">
                <MapView client:only="react" businesses={[business]} />
              </Card>
            )}
          </div>

          {/* Products Section */}
          {business.products && business.products.length > 0 && (
            <section class="mt-8">
              <h2 class="text-2xl font-semibold mb-6">Productos y Servicios</h2>
              <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
                {business.products.map((product: Product) => (
                  <ProductCard
                    client:load
                    product={product}
                    businessId={business.id}
                  />
                ))}
              </div>
            </section>
          )}

          {/* Reviews Section */}
          {business.reviews && business.reviews.length > 0 && (
            <section class="mt-8">
              <h2 class="text-2xl font-semibold mb-6">Reseñas de Clientes</h2>
              <div class="space-y-4">
                {business.reviews.map((review: Review) => (
                  <ReviewCard client:load review={review} />
                ))}
              </div>
            </section>
          )}
        </>
      )
    }
  </div>
</Layout>
